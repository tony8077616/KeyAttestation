import com.android.build.api.instrumentation.*
import com.android.build.gradle.internal.tasks.CompileArtProfileTask
import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.commons.ClassRemapper
import org.objectweb.asm.commons.Remapper

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def gitCommitCount
try {
    gitCommitCount = providers.exec {
        commandLine("git", "rev-list", "--count", "HEAD")
    }.standardOutput.asText.get().toInteger()
} catch (ignored) {
    gitCommitCount = 1
}

def properties = new Properties()
def local = project.rootProject.file("local.properties")
if (local.exists()) {
    properties.load(local.newDataInputStream())
}

android {
    compileSdk = 35
    buildToolsVersion = '35.0.0'
    namespace = 'io.github.vvb2060.keyattestation'
    defaultConfig {
        minSdk = 24
        targetSdk = 35
        versionCode = gitCommitCount
        versionName = '1.8.3'
        resourceConfigurations += ['en', 'zh-rCN', 'zh-rTW', 'pt-rBR']
        optimization {
            keepRules {
                ignoreFromAllExternalDependencies true
            }
        }
    }

    signingConfigs {
        debug {
            if (properties.getProperty("storeFile") != null) {
                storeFile file(properties.getProperty("storeFile"))
                storePassword properties.getProperty("storePassword")
                keyAlias properties.getProperty("keyAlias")
                keyPassword properties.getProperty("keyPassword")
            }
        }
    }
    buildTypes {
        debug {
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled true
            shrinkResources true
            vcsInfo.include false
            signingConfig signingConfigs.debug
            proguardFiles 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = "21"
        options.languageVersion = KotlinVersion.KOTLIN_2_0
        options.progressiveMode = true
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
        aidl = true
    }

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    androidResources {
        generateLocaleConfig true
    }

    installation {
        installOptions += ["--user 0"]
    }

    lint.checkReleaseBuilds false
    dependenciesInfo.includeInApk false
}

tasks.withType(CompileArtProfileTask.class).configureEach {
    enabled = false
}

configurations.configureEach {
    exclude group: 'dev.rikka.rikkax.appcompat', module: 'appcompat'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

dependencies {
    compileOnly project(':stub')

    implementation 'org.bouncycastle:bcprov-jdk18on:1.79'
    implementation 'com.google.guava:guava:33.3.0-android'
    implementation 'co.nstant.in:cbor:0.9'

    //noinspection GradleDependency
    implementation 'dev.rikka.rikkax.material:material:1.6.6'
    implementation 'dev.rikka.rikkax.html:html-ktx:1.1.2'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-adapter:1.3.0'
    implementation 'dev.rikka.rikkax.widget:borderview:1.1.0'
    implementation 'dev.rikka.shizuku:api:13.1.5'

    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.activity:activity-ktx:1.9.3'
    implementation 'androidx.fragment:fragment-ktx:1.8.5'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.7'
    implementation 'com.google.android.material:material:1.12.0'
}

androidComponents {
    onVariants(selector().all(), {
        instrumentation.transformClassesWith(ClassVisitorFactory.class,
                InstrumentationScope.PROJECT) {}
    })
}

abstract class ClassVisitorFactory implements AsmClassVisitorFactory<InstrumentationParameters.None> {
    ClassVisitor createClassVisitor(ClassContext classContext, ClassVisitor classVisitor) {
        return new ClassRemapper(classVisitor, new Remapper() {
            String map(String name) {
                var index = name.indexOf('$')
                if (index != -1) {
                    return map(name.substring(0, index)) + name.substring(index)
                }
                if (name.endsWith("_rename")) {
                    return name.substring(0, name.length() - 7)
                }
                return name
            }
        })
    }

    boolean isInstrumentable(ClassData classData) {
        return classData.className.startsWith("io.github.vvb2060.keyattestation.keystore.")
    }
}
